name: crdb
version: 1.0.0
formatVersion: 1
inputs:
  vm_count:
    title: Number of VMs
    type: integer
    default: 4
  disk_size:
    title: Disk Size
    type: integer
    default: 100
  number_of_disks:
    title: Number of Disks
    type: integer
    default: 1
resources:
  crdb-vm:
    type: Cloud.Machine
    allocatePerInstance: true
    properties:
      image: test-image
      flavor: large
      count: ${input.vm_count}
      remoteAccess:
        authentication: publicPrivateKey
        sshKey: ${secret.jumphost-public-key}
        username: ansible
      cloudConfigSettings:
        deploymentFailOnCloudConfigRuntimeError: true
      cloudConfig: |
        #cloud-config
        users:
          - name: ansible
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']  
        ssh_pwauth: true
        runcmd:
          - hostnamectl set-hostname --pretty ${self.resourceName}      
      attachedDisks: ${map_to_object(slice(resource.disk[*].id, input.number_of_disks*count.index, input.number_of_disks*(count.index + 1)), "source")}
      networks:
        - network: ${resource.web_net.id}
          assignment: static
      storage:
        bootDiskCapacityInGB: 60
  disk:
    type: Cloud.vSphere.Disk
    allocatePerInstance: true
    properties:
      capacityGb: ${input.disk_size}
      SCSIController: ${'SCSI_Controller_' + to_string(4*(count.index/4 - floor(count.index/4)))}
      count: ${input.vm_count * input.number_of_disks}
      tags:
        - key: App
          value: crdb
  prod_net:
    type: Cloud.Network
    properties:
      name: ls-prod
      networkType: public
      constraints:
        - tag: segment_name:ls-prod
  web_net:
    type: Cloud.NSX.Network
    properties:
      name: ls-web
      networkType: routed
  web_lb:
    type: Cloud.LoadBalancer
    properties:
      routes:
        - protocol: TCP
          port: 26257
          instanceProtocol: TCP
          instancePort: 26257
          healthCheckConfiguration:
            protocol: TCP
            port: 26257
            urlPath: /#/login
            intervalSeconds: 5
            timeoutSeconds: 15
            unhealthyThreshold: 5
            healthyThreshold: 2
        - protocol: HTTPS
          port: 8080
          instanceProtocol: HTTPS
          instancePort: 8080
          healthCheckConfiguration:
            protocol: HTTPS
            port: 8080
            intervalSeconds: 5
            timeoutSeconds: 15
            unhealthyThreshold: 5
            healthyThreshold: 2
      network: ${resource.prod_net.id}
      instances: ${resource.crdb-vm[*].id}
      internetFacing: false
  aap_api:
    type: Custom.my_custom_resource
    dependsOn:
      - crdb-vm
    properties:
      hosts:
        - ${resource.crdb-vm.*}
      base_url: ${propgroup.aap_2.aap_url}
      password: ${propgroup.aap_2.aap_password}
      username: ${propgroup.aap_2.aap_user}
      ssl_verify: false
      verbose: true
      organization_name: Default
      inventory_name: ${env.deploymentId}
      inventory_variables:
        use_ssl: true
        lb_addresses:
          - ${resource.web_lb.address}
      group_variables:
        crdb:
          psql_port: 26257
          rpc_port: 26357
      host_variables:
        crdb-vm:
          rack: 1
          port: 80
          verbose: true
      host_groups:
        crdb:
          - ${resource.crdb-vm.*}
      job_template_name: CRDB Template
